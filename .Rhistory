values <- c(length(nm),	length(separated),	length(divorced),	length(wind),	length(msa),	length(mcs),	length(sep))
# Create a data frame from the vectors
Male_df <- data.frame(status, values)
print(Male_df)
view
View(Male_df)
p <- ggplot(data=Male_df, aes(x=status, y=values)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label="Total"), vjust=1.6, color="white", size=3.5)+
theme_minimal()
p + theme(axis.text.x = element_text(face="bold",
size=11, angle=25),
axis.text.y = element_text(face="bold",
size=12))
p <- ggplot(data=Male_df, aes(x=status, y=values)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=values), vjust=1.6, color="white", size=3.5)+
theme_minimal()
p + theme(axis.text.x = element_text(face="bold",
size=11, angle=25),
axis.text.y = element_text(face="bold",
size=12))
p <- ggplot(data=Male_df, aes(x=status, y=values)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=values), vjust=-0.3, color="white", size=3.5)+
theme_minimal()
p + theme(axis.text.x = element_text(face="bold",
size=11, angle=25),
axis.text.y = element_text(face="bold",
size=12))
p <- ggplot(data=Male_df, aes(x=status, y=values)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=values), vjust=-0.3, color="blue", size=3.5)+
theme_minimal()
p + theme(axis.text.x = element_text(face="bold",
size=11, angle=25),
axis.text.y = element_text(face="bold",
size=12))
p <- ggplot(data=Male_df, aes(x=status, y=values)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=values), vjust=-0.3, color="black", size=3.5)+
theme_minimal()
p + theme(axis.text.x = element_text(face="bold",
size=11, angle=25),
axis.text.y = element_text(face="bold",
size=12))
nm <- c()
separated <- c()
divorced <- c()
wind <- c()
msa <- c()
mcs <- c()
sep <- c()
for (i in 1:length(dataset$sex)){
if(dataset$sex[i] == "Female"){
print(dataset$maritalstatus[i])
if(dataset$maritalstatus[i] == "Divorced"){
divorced <- c(divorced, dataset$maritalstatus[i])
}
if(dataset$maritalstatus[i] == "Never-married"){
nm <- c(nm, dataset$maritalstatus[i])
}
if(dataset$maritalstatus[i] == "Widowed"){
wind <- c(wind, dataset$maritalstatus[i])
}
if(dataset$maritalstatus[i] == "Married-spouse-absent"){
msa <- c(msa, dataset$maritalstatus[i])
}
if(dataset$maritalstatus[i] == "Married-civ-spouse"){
mcs <- c(mcs, dataset$maritalstatus[i])
}
if(dataset$maritalstatus[i] == "Separated"){
sep <- c(sep, dataset$maritalstatus[i])
}
}
}
length(nm)
length(separated)
length(divorced)
length(wind)
length(msa)
length(mcs)
length(sep)
status <- c("nm", "separated", "divorced", "wind", "msa", "mcs", "sep")
values <- c(length(nm),	length(separated),	length(divorced),	length(wind),	length(msa),	length(mcs),	length(sep))
# Create a data frame from the vectors
Female_df <- data.frame(status, values)
print(Female_df)
p <- ggplot(data=Male_df, aes(x=status, y=values)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=values), vjust=-0.3, color="black", size=3.5)+
theme_minimal()
p + theme(axis.text.x = element_text(face="bold",
size=11, angle=25),
axis.text.y = element_text(face="bold",
size=12))
p <- ggplot(data=Female_df, aes(x=status, y=values)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=values), vjust=-0.3, color="black", size=3.5)+
theme_minimal()
p + theme(axis.text.x = element_text(face="bold",
size=11, angle=25),
axis.text.y = element_text(face="bold",
size=12))
summary(Female_df)
head(Female_df)
summary(Female_df)
removeOutliers = function(x) {
# Get Q1 and Q3
qnt = quantile(x, probs=c(.25, .75))
# Get the interquartile range time 1.5
iqt = 1.5 * IQR(x)
# Apply on a copy of the original data
y = x
y[x < (qnt[1] - iqt)] = NA
y[x > (qnt[2] + iqt)] = NA
# Remove incomplete cases and return the resulted variable
return(y[complete.cases(y)])
}
teste <- removeOutliers(Husband)
teste
summary(teste)
install.packages("ggraph")
install.packages("igraph")
install.packages("tidyverse")
install.packages("viridis")
install.packages("ggplot2")
install.packages("plotly")
install.packages("gapminder")
library(ggplot2)
library(plotly)
library(gapminder)
p <- gapminder %>%
filter(year==1977) %>%
ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) +
geom_point() +
scale_x_log10() +
theme_bw()
ggplotly(p)
1
2
3
4
5
6
7
8
9
10
11
12
library(ggplot2)
library(plotly)
library(gapminder)
p <- gapminder %>%
filter(year==1977) %>%
ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) +
geom_point() +
scale_x_log10() +
theme_bw()
ggplotly(p)
library(ggplot2)
library(plotly)
library(gapminder)
p <- dataset %>%
filter(education=="Bachelors") %>%
ggplot( aes(hoursperweek, size = pop, color=continent)) +
geom_point() +
scale_x_log10() +
theme_bw()
ggplotly(p)
library(ggplot2)
library(plotly)
library(gapminder)
p <- dataset %>%
filter(education=="Bachelors") %>%
ggplot( aes(age,hoursperweek)) +
geom_point() +
scale_x_log10() +
theme_bw()
ggplotly(p)
table(unlist(dataset$sex))
new_data <- c()
for (i in 1:length(dataset$sex)) {
if (dataset$sex[i] == "Male" ) {
new_data <- c(new_data, dataset$sex[i])
}
}
write.csv(new_data, "Male.csv")
View(new_data)
inx <- grepl("?", dataset$workclass)
print(inx)
anuncio <- dados[which(inx), ]
table(inx)
table(dataset$capitalgain)
install.packages("tidyverse")
summary(dataset$capitalgain)
q1 <- quantile(dataset$capitalgain, probs = 0.25)
q2 <- quantile(dataset$capitalgain, probs = 0.50)
q3 <- quantile(dataset$capitalgain, probs = 0.75)
q1
q2
q3
removeOutliers = function(x) {
# Get Q1 and Q3
qnt = quantile(x, probs=c(.25, .75))
# Get the interquartile range time 1.5
iqt = 1.5 * IQR(x)
# Apply on a copy of the original data
y = x
y[x < (qnt[1] - iqt)] = NA
y[x > (qnt[2] + iqt)] = NA
# Remove incomplete cases and return the resulted variable
return(y[complete.cases(y)])ta
}
removeOutliers = function(x) {
# Get Q1 and Q3
qnt = quantile(x, probs=c(.25, .75))
# Get the interquartile range time 1.5
iqt = 1.5 * IQR(x)
# Apply on a copy of the original data
y = x
y[x < (qnt[1] - iqt)] = NA
y[x > (qnt[2] + iqt)] = NA
# Remove incomplete cases and return the resulted variable
return(y[complete.cases(y)])ta
}
removeOutliers = function(x) {
# Get Q1 and Q3
qnt = quantile(x, probs=c(.25, .75))
# Get the interquartile range time 1.5
iqt = 1.5 * IQR(x)
# Apply on a copy of the original data
y = x
y[x < (qnt[1] - iqt)] = NA
y[x > (qnt[2] + iqt)] = NA
# Remove incomplete cases and return the resulted variable
return(y[complete.cases(y)])ta
}
removeOutliers = function(x) {
# Get Q1 and Q3
qnt = quantile(x, probs=c(.25, .75))
# Get the interquartile range time 1.5
iqt = 1.5 * IQR(x)
# Apply on a copy of the original data
y = x
y[x < (qnt[1] - iqt)] = NA
y[x > (qnt[2] + iqt)] = NA
# Remove incomplete cases and return the resulted variable
return(y[complete.cases(y)])ta
}
removeOutliers = function(x) {
# Get Q1 and Q3
qnt = quantile(x, probs=c(.25, .75))
# Get the interquartile range time 1.5
iqt = 1.5 * IQR(x)
# Apply on a copy of the original data
y = x
y[x < (qnt[1] - iqt)] = NA
y[x > (qnt[2] + iqt)] = NA
# Remove incomplete cases and return the resulted variable
return(y[complete.cases(y)])
}
removeOutliers(dataset$capitalgain)
summary(dataset$capitalgain)
out <- removeOutliers(dataset$capitalgain)
summary(out)
hist(dataset$capitalgain)
hist(out)
removez = function(x){
semzero_rq2 <- c()
for (i in 1:length(x)){
if (x[i] != 0){
semzero_rq2 = c(semzero_rq2, x[i])
}
}
return(semzero_rq2)
}
summary(removez(dataset$capitalgain))
semzer_rq2 <- removez(dataset$capitalgain)
summary(semzer_rq2)
hist(semzer_rq2)
ggplot(semzer_rq2, aes(x=capitalgain)) +
geom_histogram(aes(y=..density..), colour="black", fill="white", binwidth=1000)+
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(capitalgain)), color="blue",
linetype="dashed")+
labs(title="",x="Capital Gain", y = "Count")
install.packages("ggplot2")
library(ggplot2)
library(readr)
dataset <- read_csv("C:/Users/Perseu/Google Drive/Doutorado/Mineração de Dados/Atividades/DataMining/analysis/dataset.csv")
View(dataset)
semzer_rq2 <- removez(dataset$capitalgain)
removez = function(x){
semzero_rq2 <- c()
for (i in 1:length(x)){
if (x[i] != 0){
semzero_rq2 = c(semzero_rq2, x[i])
}
}
return(semzero_rq2)
}
semzer_rq2 <- removez(dataset$capitalgain)
ggplot(semzer_rq2, aes(x=capitalgain)) +
geom_histogram(aes(y=..density..), colour="black", fill="white", binwidth=1000)+
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(capitalgain)), color="blue",
linetype="dashed")+
labs(title="",x="Capital Gain", y = "Count")
semzer_rq2
capitalgain <- data.frame(semzer_rq2)
ggplot(capitalgain, aes(x=semzer_rq2)) +
geom_histogram(aes(y=..density..), colour="black", fill="white", binwidth=1000)+
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(semzer_rq2)), color="blue",
linetype="dashed")+
labs(title="",x="Capital Gain", y = "Count")
summary(capitalgain)
rq4_new <-  function(){
capitalgain <- c()
countzero <- 0
for (i in 1:length(dataset$capitalgain)){
if(dataset$capitalgain[i] != 0){
capitalgain <- c(capitalgain, dataset$capitalgain[i])
}
if(dataset$capitalgain[i] == 0){
countzero = countzero +1
}
}
print(countzero)
print(length(capitalgain))
#capitalgain <-  na.omit(rmvoutlier(capitalgain))
print(mean(capitalgain))
print(var(capitalgain))
print(skewness(capitalgain))
print(kurtosis(capitalgain))
df <- data.frame(capitalgain)
ggplot(df, aes(x=capitalgain)) +
geom_histogram(aes(y=..density..), colour="black", fill="white", binwidth=1000)+
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(capitalgain)), color="blue",
linetype="dashed")+
geom_vline(aes(xintercept=median(capitalgain)), color="red",
linetype="dashed")+
geom_vline(aes(xintercept=var(capitalgain)), color="green",
linetype="dashed")+
labs(title="",x="Capital Gain", y = "Count")
}
rq4_new()
library(e1071)
library(ggplot2)
rq4_new()
rq4_new <-  function(){
capitalgain <- c()
countzero <- 0
for (i in 1:length(dataset$capitalgain)){
if(dataset$capitalgain[i] != 0){
capitalgain <- c(capitalgain, dataset$capitalgain[i])
}
if(dataset$capitalgain[i] == 0){
countzero = countzero +1
}
}
print(countzero)
print(length(capitalgain))
#capitalgain <-  na.omit(rmvoutlier(capitalgain))
print(mean(capitalgain))
print(var(capitalgain))
print(skewness(capitalgain))
print(kurtosis(capitalgain))
df <- data.frame(capitalgain)
ggplot(df, aes(x=capitalgain)) +
geom_histogram(aes(y=..density..), colour="black", fill="white", binwidth=1000)+
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(capitalgain)), color="blue",
linetype="dashed")+
geom_vline(aes(xintercept=median(capitalgain)), color="red",
linetype="dashed")+
labs(title="",x="Capital Gain", y = "Count")
}
rq4_new()
names(table(semzer_rq2))[table(semzer_rq2) == max(table(semzer_rq2))]
table(semzer_rq2)
mean(semzer_rq2)
mean(capital)
mean(capitalgain)
mean(removez(dataset$capitalgain))
var(removez(dataset$capitalgain))
skewness(removez(dataset$capitalgain))
kurtosis(removez(dataset$capitalgain))
rq4_new <-  function(){
capitalgain <- c()
countzero <- 0
for (i in 1:length(dataset$capitalgain)){
if(dataset$capitalgain[i] != 0){
capitalgain <- c(capitalgain, dataset$capitalgain[i])
}
if(dataset$capitalgain[i] == 0){
countzero = countzero +1
}
}
print(countzero)
print(length(capitalgain))
#capitalgain <-  na.omit(rmvoutlier(capitalgain))
print(mean(capitalgain))
print(var(capitalgain))
print(skewness(capitalgain))
print(kurtosis(capitalgain))
df <- data.frame(removeOutliers( capitalgain))
ggplot(df, aes(x=capitalgain)) +
geom_histogram(aes(y=..density..), colour="black", fill="white", binwidth=1000)+
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(capitalgain)), color="blue",
linetype="dashed")+
geom_vline(aes(xintercept=median(capitalgain)), color="red",
linetype="dashed")+
labs(title="",x="Capital Gain", y = "Count")
}
rq4_new()
removeOutliers = function(x) {
# Get Q1 and Q3
qnt = quantile(x, probs=c(.25, .75))
# Get the interquartile range time 1.5
iqt = 1.5 * IQR(x)
# Apply on a copy of the original data
y = x
y[x < (qnt[1] - iqt)] = NA
y[x > (qnt[2] + iqt)] = NA
# Remove incomplete cases and return the resulted variable
return(y[complete.cases(y)])
}
rq4_new()
rq4_new <-  function(){
capitalgain <- c()
countzero <- 0
for (i in 1:length(dataset$capitalgain)){
if(dataset$capitalgain[i] != 0){
capitalgain <- c(capitalgain, dataset$capitalgain[i])
}
if(dataset$capitalgain[i] == 0){
countzero = countzero +1
}
}
print(countzero)
print(length(capitalgain))
#capitalgain <-  na.omit(rmvoutlier(capitalgain))
print(mean(capitalgain))
print(var(capitalgain))
print(skewness(capitalgain))
print(kurtosis(capitalgain))
df <- data.frame(removeOutliers( capitalgain))
ggplot(df, aes(x=removeOutliers( capitalgain))) +
geom_histogram(aes(y=..density..), colour="black", fill="white", binwidth=1000)+
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(removeOutliers( capitalgain))), color="blue",
linetype="dashed")+
geom_vline(aes(xintercept=median(removeOutliers( capitalgain))), color="red",
linetype="dashed")+
labs(title="",x="Capital Gain", y = "Count")
}
rq4_new()
table(removeOutliers(capitalgain))
table(removeOutliers(dataset$capitalgain))
table(removeOutliers(semzer_rq2))
names(table(removez( semzer_rq2))[table(removez( semzer_rq2)) == max(table(removez( semzer_rq2)))]
names(table(removez( semzer_rq2))[table(removez( semzer_rq2)) == max(table(removez( semzer_rq2)))
names(table(removez( semzer_rq2))[table(removez( semzer_rq2)) == max(table(removez( semzer_rq2)))
names(table(removez( semzer_rq2)))[table(removez( semzer_rq2))) == max(table(removez( semzer_rq2))))]
names(table(removez( semzer_rq2)))[table(removez( semzer_rq2))) == max(table(removez( semzer_rq2))))]
names(table(semzer_rq2))[table(semzer_rq2) == max(table(semzer_rq2))]
hist(semzer_rq2)
rq4_new()
summary(semzer_rq2)
for(i in 1:length(dataset$class)){}
cont = 0
for(i in 1:length(dataset$class)){
if(dataset$class[i] == ">50K"){
cont = cont +1
}
}
print(cont)
cont = 0
for(i in 1:length(dataset$class)){
if(dataset$class[i] == "<=50K"){
cont = cont +1
}
}
print(cont)
classe <- c()
profM <- c()
for (i in 1:length(dataset$class)){
if(dataset$class[i] == "<=50K"){
profM <- c(profM, dataset$ocupation[i])
}
}
table(unlist(profM))
contador <- function(){
cont = 0
for(i in 1:length(dataset$class)){
if(dataset$class[i] == "<=50K"){
cont = cont +1
}
}
print(cont)
}
contador()
sum(1652,3263,8,3170,2098,879,1284,1752,3158,148,2281,438,2667,645,1277)
dfclass50 = data.frame(menos50 = c(1652,3263,8,3170,2098,879,1284,1752,3158,148,2281,438,2667,645,1277), mais50 = c(191,507,1,929,1968,115,86, 250,137,1,1859, 211,983,283,320))
View(dfclass50)
sum(3263,8,3170,2098,879,1284,1752,3158,148,2281,438,2667,645,1277)
sum(dfclass50$mais50)
